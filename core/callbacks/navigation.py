import requests
from aiogram import Bot, Router, F, types
from aiogram.filters import Command

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, WebAppInfo
import logging


from aiohttp import web

from core.database.models import *
from core.handlers.callback import *
from core.handlers.user_commands import start
from core.keyboards.reply import cancel

router = Router()

from core.keyboards.builders import *
from core.utils.faq import detect_intent_texts


class FAQ(StatesGroup):
    waiting_for_question = State()


@router.callback_query(F.data == 'order')
async def order(query: CallbackQuery, bot: Bot):
    # markup = types.InlineKeyboardMarkup()
    # markup.add(types.InlineKeyboardButton(text='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', web_app=WebAppInfo(url='https://botnest.ru/wp-content/uploads/2024/botnest/order.html')))
    sent_message = await query.message.answer(
        f'–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É –∏ '
        f'–º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —à–∞–≥–æ–≤',
        reply_markup=inline_builder(order_menu)
    )

    await query.answer()
    await update_last_message_id(bot, sent_message.message_id, query.from_user.id)


@router.callback_query(F.data == 'bot_examples')
async def bot_examples(query: CallbackQuery, bot: Bot):
    sent_message = await query.message.answer(
        f'–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∏–º–µ—Ä–æ–º –Ω–∞—à–∏—Ö –±–æ—Ç–æ–≤'
        f', —á—Ç–æ–±—ã –ª—É—á—à–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π —Ç–∏–ø–∞ –≤–∞–º –±–æ–ª—å—à–µ –ø–æ–¥–æ–π–¥–µ—Ç',
        reply_markup=inline_builder(examples_type)
    )

    await query.answer()
    await update_last_message_id(bot, sent_message.message_id, query.from_user.id)


@router.callback_query(F.data == 'game_examples')
async def game_examples(query: CallbackQuery, bot: Bot):
    sent_message = await query.message.answer(
        f'–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∏–º–µ—Ä–æ–º –Ω–∞—à–∏—Ö –±–æ—Ç–æ–≤'
        f', —á—Ç–æ–±—ã –ª—É—á—à–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π —Ç–∏–ø–∞ –≤–∞–º –±–æ–ª—å—à–µ –ø–æ–¥–æ–π–¥–µ—Ç',
        reply_markup=inline_builder(games_type)
    )

    await query.answer()
    await update_last_message_id(bot, sent_message.message_id, query.from_user.id)



@router.callback_query(F.data == 'fin_trigger')
async def fin_trigger(query: CallbackQuery, bot: Bot):
    text = (
        "<b>–°–µ—Ç–µ–≤–∞—è –∏–≥—Ä–∞ - Final Trigger</b> \n\n"
        "–ò—Å–ø—ã—Ç–∞–π —Å–≤–æ—é —É–¥–∞—á—É –≤ –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ–π –∏–≥—Ä–µ —Ä—É—Å—Å–∫–æ–π —Ä—É–ª–µ—Ç–∫–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–≥—Ä–æ–≤—ã–º –±–æ—Ç–æ–º - Final Trigger! –°—Ä–∞–∑–∏—Ç–µ—Å—å —Å "
        "—Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º, —É –∫–æ–≥–æ –∏–∑ –≤–∞—Å –±–æ–ª—å—à–µ —Å–º–µ–ª–æ—Å—Ç–∏ –∏ —É–¥–∞—á–∏.\n\n"
        "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –≤—ã–∂–∏—Ç—å –≤ —Å–µ—Ä–∏–∏ —Ä–∞—É–Ω–¥–æ–≤, –≥–¥–µ —Å–º–µ—Ä—Ç–µ–ª—å–Ω–∞—è —É–≥—Ä–æ–∑–∞ —Å–∫—Ä—ã—Ç–∞ –≤ –∫–∞–∂–¥–æ–º –≤—ã—Å—Ç—Ä–µ–ª–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏"
        " –∏–Ω—Ç—É–∏—Ü–∏—é, —á—Ç–æ–±—ã –≤—ã–±–∏—Ä–∞—Ç—å –º–µ–∂–¥—É —Ä–∏—Å–∫–æ–º –¥–ª—è —Å–µ–±—è –∏–ª–∏ –∞—Ç–∞–∫–æ–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞. –ö–∞–∂–¥—ã–π —Ä–∞—É–Ω–¥ - –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä –ø–∞—Ç—Ä–æ–Ω–æ–≤, "
        "–∫–∞–∂–¥—ã–π —Ö–æ–¥ - –≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å - —Ç–æ—Ç, –∫—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –∂–∏–≤—ã—Ö.\n\n"
        "<i>–î–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ —Ä–∞–º–∫–∞—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ BotNest\n\n"
        "–î–∞–Ω–∞—è –∏–≥—Ä–∞ —Ö–æ—Ä–æ—à–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä –≤ Telegram: "
        "–≤ –Ω–µ–π –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞, —Å–∏—Å—Ç–µ–º–∞ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã –∏ –∏–≥—Ä–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä—ã –ø–æ —Å–≤–æ–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ –∂–µ–ª–∞–Ω–∏—è–º.</i>"
    )

    # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–ª–∏ URL
    image_path = 'https://botnest.ru/wp-content/uploads/2024/game/finaltrigger/Final_Trigger.png'

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    sent_message = await query.bot.send_photo(
        query.message.chat.id,
        photo=image_path,  # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        caption=text,
        reply_markup=inline_builder(final_trigger)
    )

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ update_last_message
    await update_last_message_id(bot, sent_message.message_id, query.from_user.id)


@router.callback_query(F.data == 'contacts')
async def contacts(query: CallbackQuery, bot: Bot):

    site = "botnest.ru"
    email = "info@botnest.ru"
    tg = "ryzhkov_dv"

    sent_message = await query.message.answer(
        f'–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:\n\n'
        f'üíª {site}\n'
        f'üìß {email}\n',

        reply_markup=inline_builder(contact_menu)
    )

    await query.answer()
    await update_last_message_id(bot, sent_message.message_id, query.from_user.id)


@router.callback_query(F.data == 'faq')
async def enter_faq(query: CallbackQuery, state: FSMContext, bot: Bot):
    await state.set_state(FAQ.waiting_for_question)

    sent_message = await query.message.answer("–í—ã –≤ —Ä–µ–∂–∏–º–µ FAQ. –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.",
                                              reply_markup=inline_builder(cancel_faq))

    await update_last_message_id(bot, sent_message.message_id, query.from_user.id)


@router.message(FAQ.waiting_for_question, F.text)
async def process_question(message: Message, bot: Bot, state: FSMContext):
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π "–û—Ç–º–µ–Ω–∞"
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤—ã—Ö–æ–¥–∏–º –∏–∑ FAQ)
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ FAQ.", reply_markup=ReplyKeyboardRemove())
        await start(message, bot, state)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ Dialogflow, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ "–û—Ç–º–µ–Ω–∞"
    response_text = detect_intent_texts(message.text)
    if not response_text:
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ None, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É
        response_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å."

    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    sent_message = await message.answer(response_text, reply_markup=inline_builder(cancel_faq))
    await update_last_message_id(bot, sent_message.message_id, message.from_user.id)

# @router.message(F.text == '–û—Ç–º–µ–Ω–∞', FAQ.waiting_for_question)
# async def cancel_faq(message: Message, state: FSMContext):
#     await state.clear()
#     await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ FAQ.")



# @router.callback_query(F.data == 'info_tel')
# async def info_tel(query: CallbackQuery, bot: Bot):
#     button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="contacts_from_info_tel")
#     keyboard_back = InlineKeyboardMarkup(inline_keyboard=[[button]])
#
#     await query.message.delete()
#     await query.answer()
#     phone_number = "+79044951833"  # –ü—Ä–∏–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
#     first_name = "–î–º–∏—Ç—Ä–∏–π"  # –ò–º—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è
#     await bot.send_contact(chat_id=query.from_user.id, phone_number=phone_number, first_name=first_name,
#                            reply_markup=keyboard_back)

