import json

from aiogram.fsm.state import StatesGroup, State

import logging

from core.database.models import OrderRequest, UserRole
from core.handlers.user_commands import *
from core.keyboards.reply import *

router = Router()

from core.keyboards.builders import *
from core.utils.faq import detect_intent_texts


class FAQ(StatesGroup):
    waiting_for_question = State()


@router.callback_query(F.data == 'order')
async def order(query: CallbackQuery, bot: Bot):
    # markup = types.ReplyKeyboardMarkup(keyboard=order_keyboard)
    sent_message = await query.message.answer(
        f'–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É –∏ '
        f'–º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —à–∞–≥–æ–≤',
        reply_markup=order_keyboard)

    await query.answer()
    await update_last_message_id(bot, sent_message.message_id, query.from_user.id)


@router.message(F.web_app_data)
async def web_order(message: Message, bot: Bot):
    res = json.loads(message.web_app_data.data)
    sent_message = await message.answer(f'–°–ø–∞—Å–∏–±–æ {res["name"]}, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')
    await update_last_message_id(bot, sent_message.message_id, message.from_user.id)

    # –°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Å—Å–∏—é —Å –≤–∞—à–µ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    async with async_session() as session:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
        user = result.scalar()
        if user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ order_requests —Å user.id
            order_request = OrderRequest(
                user_id=user.id,
                phone=res["phone"],
                email=res["email"],
                description=res["description"],
                contact_via_telegram=res["contactViaTelegram"]
            )
            session.add(order_request)
            await session.commit()

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
            contact_request = "–î–∞" if res["contactViaTelegram"] else "–ù–µ—Ç"
            admin_message = (
                f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {res['name']}:\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {res['phone']}\n"
                f"Email: {res['email']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {res['description']}\n"
                f"–°–≤—è–∑—å —á–µ—Ä–µ–∑ Telegram: {contact_request}"
            )

            await notify_admins_and_mods(bot, session, admin_message)

        else:
            await message.answer(f'–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')


async def notify_admins_and_mods(bot, session, message, include_moderators=True):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    roles_to_notify = [UserRole.admin]
    if include_moderators:
        roles_to_notify.append(UserRole.moderator)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    admins_and_mods = await session.execute(select(User).where(User.role.in_(roles_to_notify)))
    admins_and_mods = admins_and_mods.scalars().all()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
    for admin_or_mod in admins_and_mods:
        try:
            await bot.send_message(admin_or_mod.telegram_id, message, parse_mode='HTML')
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {admin_or_mod.telegram_id}: {e}")


@router.callback_query(F.data == 'bot_examples')
async def bot_examples(query: CallbackQuery, bot: Bot):
    sent_message = await query.message.answer(
        f'–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∏–º–µ—Ä–æ–º –Ω–∞—à–∏—Ö –±–æ—Ç–æ–≤'
        f', —á—Ç–æ–±—ã –ª—É—á—à–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π —Ç–∏–ø–∞ –≤–∞–º –±–æ–ª—å—à–µ –ø–æ–¥–æ–π–¥–µ—Ç',
        reply_markup=inline_builder(examples_type)
    )

    await query.answer()
    await update_last_message_id(bot, sent_message.message_id, query.from_user.id)



@router.callback_query(F.data == 'business_examples')
async def business_examples(query: CallbackQuery, bot: Bot):
    response_text = (f'–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∏–º–µ—Ä–æ–º –Ω–∞—à–∏—Ö'
                     f'—á—Ç–æ–±—ã –ª—É—á—à–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π —Ç–∏–ø–∞ –≤–∞–º –±–æ–ª—å—à–µ –ø–æ–¥–æ–π–¥–µ—Ç')

    await query_message(query, bot, response_text, business_type)


@router.callback_query(F.data == 'info_examples')
async def info_examples(query: CallbackQuery, bot: Bot):
    response_text = (f'–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∏–º–µ—Ä–æ–º –Ω–∞—à–∏—Ö'
                     f'—á—Ç–æ–±—ã –ª—É—á—à–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π —Ç–∏–ø–∞ –≤–∞–º –±–æ–ª—å—à–µ –ø–æ–¥–æ–π–¥–µ—Ç')

    await query_message(query, bot, response_text, info_type)


@router.callback_query(F.data == 'ai_examples')
async def ai_examples(query: CallbackQuery, bot: Bot):
    sent_message = await query.message.answer(
        f'–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∏–º–µ—Ä–æ–º –±–æ—Ç–æ–≤ –Ω–∞ –ò–ò'
        f', —á—Ç–æ–±—ã –ª—É—á—à–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π —Ç–∏–ø–∞ –≤–∞–º –±–æ–ª—å—à–µ –ø–æ–¥–æ–π–¥–µ—Ç',
        reply_markup=inline_builder(ai_type)
    )

    await query.answer()
    await update_last_message_id(bot, sent_message.message_id, query.from_user.id)


@router.callback_query(F.data == 'game_examples')
async def game_examples(query: CallbackQuery, bot: Bot):
    sent_message = await query.message.answer(
        f'–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∏–º–µ—Ä–æ–º –Ω–∞—à–∏—Ö –±–æ—Ç–æ–≤'
        f', —á—Ç–æ–±—ã –ª—É—á—à–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π —Ç–∏–ø–∞ –≤–∞–º –±–æ–ª—å—à–µ –ø–æ–¥–æ–π–¥–µ—Ç',
        reply_markup=inline_builder(games_type)
    )

    await query.answer()
    await update_last_message_id(bot, sent_message.message_id, query.from_user.id)


@router.callback_query(F.data == 'fin_trigger')
async def fin_trigger(query: CallbackQuery, bot: Bot):
    text = (
        "<b>–°–µ—Ç–µ–≤–∞—è –∏–≥—Ä–∞ - Final Trigger</b> \n\n"
        "–ò—Å–ø—ã—Ç–∞–π —Å–≤–æ—é —É–¥–∞—á—É –≤ –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ–π –∏–≥—Ä–µ —Ä—É—Å—Å–∫–æ–π —Ä—É–ª–µ—Ç–∫–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–≥—Ä–æ–≤—ã–º –±–æ—Ç–æ–º - Final Trigger! –°—Ä–∞–∑–∏—Ç–µ—Å—å —Å "
        "—Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º, —É –∫–æ–≥–æ –∏–∑ –≤–∞—Å –±–æ–ª—å—à–µ —Å–º–µ–ª–æ—Å—Ç–∏ –∏ —É–¥–∞—á–∏.\n\n"
        "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –≤—ã–∂–∏—Ç—å –≤ —Å–µ—Ä–∏–∏ —Ä–∞—É–Ω–¥–æ–≤, –≥–¥–µ —Å–º–µ—Ä—Ç–µ–ª—å–Ω–∞—è —É–≥—Ä–æ–∑–∞ —Å–∫—Ä—ã—Ç–∞ –≤ –∫–∞–∂–¥–æ–º –≤—ã—Å—Ç—Ä–µ–ª–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏"
        " –∏–Ω—Ç—É–∏—Ü–∏—é, —á—Ç–æ–±—ã –≤—ã–±–∏—Ä–∞—Ç—å –º–µ–∂–¥—É —Ä–∏—Å–∫–æ–º –¥–ª—è —Å–µ–±—è –∏–ª–∏ –∞—Ç–∞–∫–æ–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞. –ö–∞–∂–¥—ã–π —Ä–∞—É–Ω–¥ - –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä –ø–∞—Ç—Ä–æ–Ω–æ–≤, "
        "–∫–∞–∂–¥—ã–π —Ö–æ–¥ - –≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å - —Ç–æ—Ç, –∫—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –∂–∏–≤—ã—Ö.\n\n"
        "<i>–î–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ —Ä–∞–º–∫–∞—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ BotNest\n\n"
        "–î–∞–Ω–∞—è –∏–≥—Ä–∞ —Ö–æ—Ä–æ—à–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä –≤ Telegram: "
        "–≤ –Ω–µ–π –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞, —Å–∏—Å—Ç–µ–º–∞ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã –∏ –∏–≥—Ä–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä—ã –ø–æ —Å–≤–æ–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ –∂–µ–ª–∞–Ω–∏—è–º.</i>"
    )

    # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–ª–∏ URL
    image_path = 'https://botnest.ru/wp-content/uploads/2024/game/finaltrigger/Final_Trigger.png'

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    sent_message = await query.bot.send_photo(
        query.message.chat.id,
        photo=image_path,  # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        caption=text,
        reply_markup=inline_builder(final_trigger)
    )

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ update_last_message
    await update_last_message_id(bot, sent_message.message_id, query.from_user.id)


@router.callback_query(F.data == 'contacts')
async def contacts(query: CallbackQuery, bot: Bot):
    site = "botnest.ru"
    email = "info@botnest.ru"

    sent_message = await query.message.answer(
        f'–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:\n\n'
        f'üíª {site}\n'
        f'üìß {email}\n',

        reply_markup=inline_builder(contact_menu)
    )

    await query.answer()
    await update_last_message_id(bot, sent_message.message_id, query.from_user.id)


@router.callback_query(F.data == 'faq')
async def enter_faq(query: CallbackQuery, state: FSMContext, bot: Bot):
    await state.set_state(FAQ.waiting_for_question)

    sent_message = await query.message.answer("–í—ã –≤ —Ä–µ–∂–∏–º–µ FAQ. –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.",
                                              reply_markup=inline_builder(cancel_faq))

    await update_last_message_id(bot, sent_message.message_id, query.from_user.id)


@router.message(FAQ.waiting_for_question, F.text)
async def process_question(message: Message, bot: Bot, state: FSMContext):
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π "–û—Ç–º–µ–Ω–∞"
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤—ã—Ö–æ–¥–∏–º –∏–∑ FAQ)
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ FAQ.", reply_markup=ReplyKeyboardRemove())
        await start(message, bot, state)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ Dialogflow, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ "–û—Ç–º–µ–Ω–∞"
    response_text = detect_intent_texts(message.text)
    if not response_text:
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ None, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É
        response_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å."

    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    sent_message = await message.answer(response_text, reply_markup=inline_builder(cancel_faq))
    await update_last_message_id(bot, sent_message.message_id, message.from_user.id)


async def query_message_photo(query: CallbackQuery, bot: Bot, text: str, image_path: str, inline_builder_key):
    await query.answer()
    sent_message = await query.bot.send_photo(
        query.message.chat.id,
        photo=image_path,
        caption=text,
        reply_markup=inline_builder(inline_builder_key)
    )
    await update_last_message_id(bot, sent_message.message_id, query.from_user.id)


async def query_message(query: CallbackQuery, bot: Bot, text: str, inline_builder_key):
    await query.answer()
    sent_message = await query.message.answer(text, reply_markup=inline_builder(inline_builder_key))

    await update_last_message_id(bot, sent_message.message_id, query.from_user.id)
