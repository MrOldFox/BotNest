import requests
from aiogram import Bot, Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
import logging

from core.handlers.callback import update_last_message
from core.handlers.user_commands import start
from core.keyboards.reply import cancel

router = Router()

from core.keyboards.builders import *
from core.utils.faq import detect_intent_texts


class FAQ(StatesGroup):
    waiting_for_question = State()


@router.callback_query(F.data == 'order')
async def order(query: CallbackQuery, state: FSMContext):
    sent_message = await query.message.answer(
        f'–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É –∏ '
        f'–º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —à–∞–≥–æ–≤',
        reply_markup=inline_builder(order_menu)
    )

    await query.answer()
    await update_last_message(query.bot, state, query.message.chat.id, sent_message.message_id)


@router.callback_query(F.data == 'contacts')
async def contacts(query: CallbackQuery, state: FSMContext):

    site = "botnest.ru"
    email = "info@botnest.ru"
    tg = "ryzhkov_dv"

    sent_message = await query.message.answer(
        f'–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:\n\n'
        f'üíª {site}\n'
        f'üìß {email}\n',

        reply_markup=inline_builder(contact_menu)
    )

    await query.answer()
    await update_last_message(query.bot, state, query.message.chat.id, sent_message.message_id)

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ update_last_message —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º chat_id


@router.callback_query(F.data == 'faq')
async def enter_faq(query: CallbackQuery, state: FSMContext):
    await state.set_state(FAQ.waiting_for_question)

    sent_message = await query.message.answer("–í—ã –≤ —Ä–µ–∂–∏–º–µ FAQ. –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.", reply_markup=cancel)

    await update_last_message(query.bot, state, query.message.chat.id, sent_message.message_id)


@router.message(FAQ.waiting_for_question, F.text)
async def process_question(message: Message, bot: Bot, state: FSMContext):
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π "–û—Ç–º–µ–Ω–∞"
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤—ã—Ö–æ–¥–∏–º –∏–∑ FAQ)
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ FAQ.", reply_markup=ReplyKeyboardRemove())
        await start(message, bot, state)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ Dialogflow, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ "–û—Ç–º–µ–Ω–∞"
    response_text = detect_intent_texts(message.text)
    if not response_text:
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ None, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É
        response_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å."

    await message.answer(response_text)


# @router.message(F.text == '–û—Ç–º–µ–Ω–∞', FAQ.waiting_for_question)
# async def cancel_faq(message: Message, state: FSMContext):
#     await state.clear()
#     await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ FAQ.")



# @router.callback_query(F.data == 'info_tel')
# async def info_tel(query: CallbackQuery, bot: Bot):
#     button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="contacts_from_info_tel")
#     keyboard_back = InlineKeyboardMarkup(inline_keyboard=[[button]])
#
#     await query.message.delete()
#     await query.answer()
#     phone_number = "+79044951833"  # –ü—Ä–∏–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
#     first_name = "–î–º–∏—Ç—Ä–∏–π"  # –ò–º—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è
#     await bot.send_contact(chat_id=query.from_user.id, phone_number=phone_number, first_name=first_name,
#                            reply_markup=keyboard_back)

