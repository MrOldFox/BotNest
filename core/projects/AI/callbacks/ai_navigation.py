import openai
import requests
from aiogram import Bot, Router, F, types
from aiogram.filters import Command
from aiogram.fsm import state
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
import logging

from core.callbacks.navigation import query_message_photo
from core.database.models import *
from core.handlers.callback import *
from core.projects.AI.callbacks.ai_assistant import create_chatgpt_prompt
from core.projects.AI.keyboards.builder import inline_builder, quit_ai, order, ai

router = Router()


class AI_ASS(StatesGroup):
    waiting_for_ai_ass = State()
    waiting_for_gpt_ass = State()


@router.callback_query(F.data == 'ai_helper')
async def ai_helper(query: CallbackQuery, bot: Bot, state: FSMContext):

    if state:
        await state.clear()

    text = (
        f"<b>ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫</b>\n\n"
        f"–í —Ä–∞–∑–¥–µ–ª–µ  –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —á–∞—Ç-–±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ ChatGPT, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–∞–∫ –ø–æ–º–æ—â–Ω–∏–∫ "
        f"–¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤. –ù–∞—à –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–æ–µ–∫—Ç Beauty Bot –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ —Ç–∞–∫–æ–π –±–æ—Ç –º–æ–∂–µ—Ç "
        f"–≤—ã—Å—Ç—É–ø–∞—Ç—å –≤ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏ "
        f"–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ.\n\n"
        f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã, "
        f"–Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –≤–∞–º –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞."
    )
    image_path = 'https://botnest.ru/wp-content/uploads/2024/botnest/images/examples.png'

    await query_message_photo(query, bot, text, image_path, ai)


@router.callback_query(F.data == 'ai_gpt')
async def ai_gpt(query: CallbackQuery, bot: Bot, state: FSMContext):

    if state:
        await state.clear()

    text = (
        f"<b>ü§ñ ChatGPT –ø–æ–º–æ—â–Ω–∏–∫</b>\n\n"
        f"–í —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫, –≤–æ–ø–ª–æ—â–µ–Ω–∏–µ –Ω–æ–≤–µ–π—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ "
        f"–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ - —á–∞—Ç-–±–æ—Ç, –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å ChatGPT.\n\n–≠—Ç–æ—Ç –±–æ—Ç —Å–ø–æ—Å–æ–±–µ–Ω –æ–±—â–∞—Ç—å—Å—è –Ω–∞ –ª—é–±—ã–µ —Ç–µ–º—ã, "
        f"–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –∑–∞–ø—Ä–æ—Å—ã."
    )
    image_path = 'https://botnest.ru/wp-content/uploads/2024/botnest/images/examples.png'

    await query_message_photo(query, bot, text, image_path, ai)

@router.callback_query(F.data == 'ai_ass')
async def ai_ass(query: CallbackQuery, state: FSMContext, bot: Bot):
    await state.set_state(AI_ASS.waiting_for_ai_ass)

    sent_message = await query.message.answer("–í—ã –≤ —Ä–µ–∂–∏–º–µ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.",
                                              reply_markup=inline_builder(quit_ai))

    await update_last_message_id(bot, sent_message.message_id, query.from_user.id)


@router.callback_query(F.data == 'ai_gpt')
async def ai_gpt(query: CallbackQuery, state: FSMContext, bot: Bot):
    await state.set_state(AI_ASS.waiting_for_gpt_ass)

    sent_message = await query.message.answer("–í—ã –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞ GPT. –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.",
                                              reply_markup=inline_builder(quit_ai))

    await update_last_message_id(bot, sent_message.message_id, query.from_user.id)


@router.message(AI_ASS.waiting_for_ai_ass, F.text)
async def process_ai_question(message: Message, bot: Bot, state: FSMContext):
    try:
        user_input = message.text
        prompt = create_chatgpt_prompt(user_input)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        temperature = 0.4  # –ü—Ä–∏–º–µ—Ä –¥–ª—è —É–º–µ—Ä–µ–Ω–Ω–æ–π —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π —Å–≤–æ–±–æ–¥—ã

        chat = openai.chat.completions.create(
            model='gpt-3.5-turbo',
            messages=prompt,
            temperature=temperature
        )

        answer = chat.choices[0].message.content
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏ –≤—ã–∑–æ–≤ callback-—Ñ—É–Ω–∫—Ü–∏–∏
        if "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏" in answer:
            sent_message = await message.answer("–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É?", reply_markup=inline_builder(order))
            await update_last_message_id(bot, sent_message.message_id, message.from_user.id)
        else:
            sent_message = await message.answer(answer, reply_markup=inline_builder(quit_ai))
            await update_last_message_id(bot, sent_message.message_id, message.from_user.id)
    except Exception as e:
        logging.error(e)


@router.message(AI_ASS.waiting_for_gpt_ass, F.text)
async def process_ai_question(message: Message, bot: Bot, state: FSMContext):
    try:
        user_input = message.text

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        temperature = 0.4  # –ü—Ä–∏–º–µ—Ä –¥–ª—è —É–º–µ—Ä–µ–Ω–Ω–æ–π —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π —Å–≤–æ–±–æ–¥—ã

        chat = openai.chat.completions.create(
            model='gpt-3.5-turbo',
            messages=user_input,
            temperature=temperature
        )

        answer = chat.choices[0].message.content
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)


        sent_message = await message.answer(answer, reply_markup=inline_builder(quit_ai))
        await update_last_message_id(bot, sent_message.message_id, message.from_user.id)
    except Exception as e:
        logging.error(e)
