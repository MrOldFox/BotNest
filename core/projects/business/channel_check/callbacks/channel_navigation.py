from core.callbacks.navigation import query_message_photo, query_message_video, query_message
from core.handlers.user_commands import *
from core.projects.business.business_card.database.requests import Database
from core.projects.business.business_card.keyboards.builders import *
from core.projects.business.channel_check.keyboards.builders import sub_channel_main, nosub_channel_main
import asyncio

router = Router()



@router.callback_query(F.data == 'channel_main')
async def channel_main(query: CallbackQuery, bot: Bot):
    telegram_id = query.from_user.id

    is_subscribed = await check_user_subscription(bot, telegram_id, '-1002114150805')


    subscription_active = is_subscribed if is_subscribed else False


    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if subscription_active:
        status_text = "üü¢ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞"
    else:
        status_text = "üî¥ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"

    image = 'https://botnest.ru/wp-content/uploads/2024/botnest/images/fitnest.webp'

    text = (
        f"üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FitNest!</b>\n\n"
        f"–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Ñ–∏—Ç–Ω–µ—Å–∞ —Å –Ω–∞—à–∏–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é. üöÄ\n\n"
        f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.\n\n"
        f"{status_text}\n\n"
        f"<i>–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Telegram "
        f"–≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –≤–∞—à–∏—Ö —Ç–µ–ª–µ–≥—Ä–∞–º –≥—Ä—É–ø–ø–∞—Ö –∏–ª–∏ –∫–∞–Ω–∞–ª–∞—Ö</i>"
    )

    if subscription_active:
        await query_message_photo(query, bot, text, image, sub_channel_main)
    else:
        await query_message_photo(query, bot, text, image, nosub_channel_main)


@router.callback_query(F.data == 'check_channel')
async def channel_check(query: CallbackQuery, bot: Bot):
    telegram_id = query.from_user.id

    is_subscribed = await check_user_subscription(bot, telegram_id, '-1002114150805')

    subscription_active = is_subscribed if is_subscribed else False


    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if subscription_active:
        await channel_main(query, bot)
    else:
        sent_message = await query.message.answer(
            text="üî¥ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"
        )
        await query.answer()
        await asyncio.sleep(3)
        await sent_message.delete()



async def check_user_subscription(bot: Bot, user_id: int, channel_id: str) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º, –µ—Å–ª–∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å –Ω–µ 'left' –∏ –Ω–µ 'kicked'
        return member.status not in ['left', 'kicked', 'creator']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False
