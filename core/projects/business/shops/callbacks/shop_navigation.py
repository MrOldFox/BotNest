from aiogram import types
from aiogram.types import LabeledPrice, PreCheckoutQuery

from core.callbacks.navigation import *
from core.handlers.user_commands import *
from core.projects.business.shops.keyboards.builders import *

image_main = 'https://botnest.ru/wp-content/uploads/2024/botnest/shop/photo/shop.webp'

router = Router()

@router.callback_query(F.data == 'shop_main')
async def shop_main(query: CallbackQuery, bot: Bot):
    text = (
        "<b>üì≤ –ú–∞–≥–∞–∑–∏–Ω —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ MobileNest</b> \n\n"
        "–ù–∞—à —á–∞—Ç-–±–æ—Ç –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞–º –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∏—Ö –º–æ–¥–µ–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤,"
        " –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö, –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ –∏ –¥–∞–∂–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –ø—Ä—è–º–æ "
        "—á–µ—Ä–µ–∑ Telegram.\n\n–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞ —Å–æ–∫—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏ –ø–æ–≤—ã—à–∞–µ—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤."
    )
    image_path = image_main

    await query_message_photo(query, bot, text, image_path, shop_info)


@router.callback_query(F.data == 'order_history')
async def order_history(query: CallbackQuery, bot: Bot):
    user_id = query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫—É–ø–∫–∏
    user_purchases = await db.get_user_purchases(user_id)
    if not user_purchases:
        # –ï—Å–ª–∏ –ø–æ–∫—É–ø–æ–∫ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç
        await query.answer("–í—ã –µ—â—ë –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –ø–æ–∫—É–ø–æ–∫.", show_alert=True)
        return

    # –ï—Å–ª–∏ –ø–æ–∫—É–ø–∫–∏ –µ—Å—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    purchase_keyboard = await generate_purchase_keyboard(user_id)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –Ω—É–∂–Ω—É—é –ø–æ–∫—É–ø–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏:"
    image_path = image_main

    await query_message_photo(query, bot, text, image_path, purchase_keyboard)


@router.callback_query(F.data == 'get_categories')
async def get_categories(query: CallbackQuery, bot: Bot):  # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
    category_menu = await get_categories_menu()

    text = (
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:</b>"
    )

    image_path = image_main

    await query_message_photo(query, bot, text, image_path, category_menu)


@router.callback_query(F.data.startswith("page_"))
async def paginate_categories(query: CallbackQuery, bot: Bot):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    print(query.data)
    page = int(query.data.split('_')[1])

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    category_menu = await get_categories_menu(page=page)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:</b>"
    image_path = image_main

    await query_message_photo(query, bot, text, image_path, category_menu)
    await query.answer()




@router.callback_query(F.data.startswith("brand_"))
async def show_products_by_brand(query: CallbackQuery, bot: Bot):
    data_parts = query.data.split('_')
    if len(data_parts) == 3:
        # –ï—Å–ª–∏ callback_data —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–∏ —á–∞—Å—Ç–∏, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Ñ–æ—Ä–º–∞—Ç "brand_{brand_slug}_{page}"
        _, brand_slug, str_page = data_parts
        page = int(str_page)
    elif len(data_parts) == 2:
        # –ï—Å–ª–∏ callback_data —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–µ —á–∞—Å—Ç–∏, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Ñ–æ—Ä–º–∞—Ç "brand_{brand_slug}", –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        _, brand_slug = data_parts
        page = 0
    else:
        # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º photo_url –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ brand_slug
    photo_url = await db.get_brand_photo_url_by_slug(brand_slug)
    if not photo_url:
        photo_url = "https://botnest.ru/wp-content/uploads/2024/botnest/shop/photo/shop.webp"


    products_menu = await get_products_by_brand_menu(brand_slug, page)


    text = f"<b>–ü—Ä–æ–¥—É–∫—Ç—ã –±—Ä–µ–Ω–¥–∞:</b>"

    await query_message_photo(query, bot, text, photo_url, products_menu)
    await query.answer()


@router.callback_query(F.data.startswith("color_"))
async def show_products_by_color(query: CallbackQuery, bot: Bot):
    data_parts = query.data.split('_')
    if len(data_parts) == 4:
        # –ï—Å–ª–∏ callback_data —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–∏ —á–∞—Å—Ç–∏, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Ñ–æ—Ä–º–∞—Ç "brand_{brand_slug}_{page}"
        _, product_name, brand_slug, str_page = data_parts
        page = int(str_page)
    elif len(data_parts) == 3:
        # –ï—Å–ª–∏ callback_data —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–µ —á–∞—Å—Ç–∏, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Ñ–æ—Ä–º–∞—Ç "brand_{brand_slug}", –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        _, product_name, brand_slug = data_parts
        page = 0
    else:
        # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)
        return

    products_menu = await get_products_by_color(product_name, brand_slug)


    text = f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞:</b>"

    await query_message_photo(query, bot, text, "https://botnest.ru/wp-content/uploads/2024/botnest/shop/photo/apple-logo.jpg", products_menu)
    await query.answer()



@router.callback_query(F.data == "checkout")
async def checkout(query: CallbackQuery, bot: Bot):
    user_id = query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cart_items = await db.get_checkout_items(user_id)
    if not cart_items:
        await query.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", show_alert=True)
        return

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω –¥–ª—è –∏–Ω–≤–æ–π—Å–∞
    prices = []
    for cart_item, product_name, stock_quantity, price, color in cart_items:
        label = f"{product_name} ({color}) x {cart_item.quantity}"
        amount = int(price) * 100 * cart_item.quantity  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏ —É–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ 100
        print(amount)
        prices.append(LabeledPrice(label=label, amount=amount))

    total_amount = sum(price.amount for price in prices)  # –û–±—â–∞—è —Å—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    print(prices)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –æ–±—â–∞—è —Å—É–º–º–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–æ—Ä–æ–≥
    max_amount = 25000000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (250 000 —Ä—É–±–ª–µ–π)
    if total_amount > max_amount:
        await query.answer(f"–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 250 000 —Ä—É–±–ª–µ–π. –í–∞—à–∞ —Å—É–º–º–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {total_amount / 100} —Ä—É–±–ª–µ–π.", show_alert=True)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–Ω–≤–æ–π—Å–µ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    first_item_photo_url = 'https://botnest.ru/wp-content/uploads/2024/botnest/shop/photo/pay.png?_t=1707660307'

    text = (f'\n–î–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã:'\
            f'\n\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 1111 1111 1111 1026,'\
            f'\n–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞: 12/22,'\
            f'\nCVC: 000\n')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    send_message = await bot.send_invoice(
        chat_id=query.message.chat.id,
        title='–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã',
        description=text,
        payload='Test payment',
        provider_token='381764678:TEST:73182',  # –¢–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        currency='rub',
        prices=prices,
        need_name=True,
        need_phone_number=True,
        need_shipping_address=True,
        need_email=True,
        start_parameter='botnest',
        send_email_to_provider=False,
        send_phone_number_to_provider=False,
        provider_data=None,
        photo_url=first_item_photo_url,
        protect_content=False,
        reply_markup=inline_builder(shop_back),
        allow_sending_without_reply=True,
    )

    await update_last_message_id(bot, send_message.message_id, query.from_user.id)
    await query.answer()

@router.pre_checkout_query()
async def pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    print('ok')

@router.message(F.successful_payment)
async def successful_payment(message: Message, bot: Bot):
    telegram_id = message.from_user.id

    user_id = message.from_user.id

    # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cart_items = await db.get_checkout_items(user_id)
    if cart_items:
        # –®–∞–≥ 2: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ PurchaseHistory
        total_amount = message.successful_payment.total_amount / 100  # Telegram –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        purchase_id = await db.add_purchase_history(user_id, total_amount, cart_items)

        # –®–∞–≥ 3: –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ PurchaseDetail
        for cart_item, product_name, stock_quantity, price, color in cart_items:
            await db.add_purchase_detail(purchase_id, cart_item.product_id, cart_item.quantity, price)

    await db.clear_user_cart(user_id)

    text = (
        f"<b>üí¨ –£—Å–ø–µ—à–Ω–æ!</b> \n\n"
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–±–Ω—É—é –æ–ø–ª–∞—Ç—É —Ç–æ–≤–∞—Ä–∞, –ø—Ä–∏ —ç—Ç–æ–º –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ {message.successful_payment.total_amount // 100} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö {message.successful_payment.currency}.\n\n"
        f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–∫–æ–π –∂–µ –±–æ—Ç, —Ç–æ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∏–∂–µ."
    )
    image_path = 'https://botnest.ru/wp-content/uploads/2024/botnest/shop/photo/pay.png?_t=1707660307'
    sent_message = await bot.send_photo(
        message.chat.id,
        photo=image_path,  # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        caption=text,
        reply_markup=inline_builder(buy)
    )
    await update_last_message_id(bot, sent_message.message_id, telegram_id)


@router.callback_query(F.data.startswith("search"))
async def increase_cart_item_quantity(query: CallbackQuery, bot: Bot):
    await query.answer(
        f"–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        show_alert=True)

@router.callback_query(F.data == "view_cart")
async def view_cart(query: CallbackQuery, bot: Bot):
    user_id = query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cart_items = await db.get_cart_items(user_id)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å —Ç–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    if not cart_items:
        await query.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", show_alert=True)
        return

    text = "–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã:\n\n"
    total_price = 0  # –î–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º enumerate –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    for index, (cart_item, product_name, stock_quantity, price, color) in enumerate(cart_items, start=1):
        item_total_price = cart_item.quantity * price  # –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        text += f"{index}) {product_name} ({color}) - {cart_item.quantity} —à—Ç. ({item_total_price} —Ä—É–±.)\n"
        total_price += item_total_price  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –∫ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ—Ä–∑–∏–Ω—ã

    text += f"\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±."

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])

    for index, (cart_item, product_name, stock_quantity, color, _) in enumerate(cart_items, start=1):
        buttons_row = [
            types.InlineKeyboardButton(text="<-", callback_data=f"cart_decrease_{cart_item.cart_id}_{cart_item.quantity}"),
            types.InlineKeyboardButton(text=f"{index}", callback_data="noop"),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞–∫ –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            types.InlineKeyboardButton(text="->", callback_data=f"cart_increase_{cart_item.cart_id}_{cart_item.quantity}_{stock_quantity}")
        ]
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –∫–∞–∫ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ inline_keyboard
        keyboard.inline_keyboard.append(buttons_row)
    # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å"
    keyboard.inline_keyboard.append([
        types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data="checkout")
    ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.inline_keyboard.append([
        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="shop_main")
    ])

    image_path = 'https://botnest.ru/wp-content/uploads/2024/botnest/shop/photo/pay.png?_t=1707660307'

    send_message = await query.bot.send_photo(query.message.chat.id, photo=image_path, caption=text, reply_markup=keyboard)
    await update_last_message_id(bot, send_message.message_id, query.from_user.id)


@router.callback_query(F.data.startswith("cart_increase_"))
async def increase_cart_item_quantity(query: CallbackQuery, bot: Bot):
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ callback_data –∏–º–µ–µ—Ç –≤–∏–¥ "cart_increase_cart_id_current_quantity_stock_quantity"
    data_parts = query.data.split('_')
    if len(data_parts) != 5:
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    _, cart_id, current_quantity, stock_quantity = data_parts[1], int(data_parts[2]), int(data_parts[3]), int(data_parts[4])

    if current_quantity < stock_quantity:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        await db.update_cart_item_quantity(cart_id, current_quantity + 1)
    else:
        await query.answer("–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.", show_alert=True)

    await view_cart(query, bot)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã


@router.callback_query(F.data.startswith("cart_decrease_"))
async def decrease_cart_item_quantity(query: CallbackQuery, bot: Bot):
    data_parts = query.data.split('_')
    if len(data_parts) >= 4:
        _, cart_id_str, current_quantity_str = data_parts[1:4]
        try:
            cart_id = int(cart_id_str)
            current_quantity = int(current_quantity_str)

            if current_quantity > 1:
                await db.update_cart_item_quantity(cart_id, current_quantity - 1)
            else:
                await db.remove_item_from_cart(cart_id)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â—ë —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                remaining_items = await db.get_cart_items(query.from_user.id)
                if not remaining_items:
                    # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é
                    await query.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –º–µ–Ω—é.")
                    await shop_main(query, bot)  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è show_main_menu –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                    return

            await view_cart(query, bot)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
        except ValueError:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", show_alert=True)
    else:
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", show_alert=True)


@router.callback_query(F.data.startswith("add_"))
async def add_to_cart(query: CallbackQuery, bot: Bot):
    _, product_id, quantity, telegram_id, product_name = query.data.split('_')
    product_id = int(product_id)
    quantity = int(quantity)
    telegram_id = int(telegram_id)

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_message = await db.add_item_to_cart(telegram_id, product_id, quantity)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await query.answer(result_message, show_alert=True)


def get_product_keyboard(product_id: int, quantity: int, brand_slug: str, telegram_id: int, product_name: str):
    buttons = [
        [
            types.InlineKeyboardButton(text="‚¨áÔ∏è", callback_data=f"decrease_{product_id}_{quantity}_{telegram_id}_{product_name}"),
            types.InlineKeyboardButton(text=f"üõí +{quantity}", callback_data=f"add_{product_id}_{quantity}_{telegram_id}_{product_name}"),
            types.InlineKeyboardButton(text="‚¨ÜÔ∏è", callback_data=f"increase_{product_id}_{quantity}_{telegram_id}_{product_name}")
        ],
            [types.InlineKeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞", callback_data='view_cart')],
            [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"color_{product_name}_{brand_slug}")]

        ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)

    return keyboard


@router.callback_query(or_f(F.data.startswith("increase_"), F.data.startswith("decrease_")))
async def change_quantity(query: CallbackQuery, bot: Bot):
    action, product_id, quantity, telegram_id, product_name = query.data.split('_')
    product_id = int(product_id)
    quantity = int(quantity)
    telegram_id = int(telegram_id)
    product_name = str(product_name)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    product = await db.get_product_by_id(product_id)
    if not product:
        await query.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    if action == "increase":
        if quantity < product.stock_quantity:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–µ–Ω—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            quantity += 1
        else:
            await query.answer("–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.", show_alert=True)
            return
    elif action == "decrease":
        if quantity > 1:
            quantity -= 1
        else:
            await query.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è - 1 —à—Ç.", show_alert=True)
            return

    await update_product_details(query.message, product_id, quantity, telegram_id, bot, product_name)
    await query.answer()

async def update_product_details(message: Message, product_id: int, quantity: int, telegram_id, bot: Bot, product_name: str):
    product = await db.get_product_by_id(product_id)
    if not product:
        await message.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    text = generate_product_details_text(product)

    sent_message = await message.answer_photo(photo=product.photo_url, caption=text, parse_mode="HTML",
                                              reply_markup=get_product_keyboard(product_id, quantity, product.brand.name_slug, telegram_id, product_name))
    await update_last_message_id(bot, sent_message.message_id, telegram_id)

@router.callback_query(F.data.startswith("product_"))
async def show_product_details(query: CallbackQuery, bot: Bot):
    data_parts = query.data.split('_')
    product_id = int(data_parts[1])
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–≤–Ω—ã–º 1, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
    quantity = int(data_parts[2]) if len(data_parts) > 4 else 1
    brand_slug = str(data_parts[2])


    if len(data_parts) > 4:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å 5 —á–∞—Å—Ç–µ–π –≤ data_parts
        quantity = int(data_parts[2])
        brand_slug = data_parts[3]
        color = data_parts[4].lower() == "true"
    elif len(data_parts) > 3:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å 4 —á–∞—Å—Ç–∏ –≤ data_parts
        brand_slug = data_parts[2]
        color = data_parts[3].lower() == "true"
    else:
        # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –¥—Ä—É–≥—É—é –ª–æ–≥–∏–∫—É
        pass

    product = await db.get_product_by_id(product_id)
    product_name = await db.get_product_name_by_id(product_id)

    if not product:
        await query.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    text = generate_product_details_text(product)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ –∏ –¥–µ—Ç–∞–ª—è–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
    sent_message = await query.message.answer_photo(photo=product.photo_url, caption=text, parse_mode="HTML", reply_markup=get_product_keyboard(product_id, quantity, brand_slug, query.from_user.id, product_name))
    await update_last_message_id(bot, sent_message.message_id, query.from_user.id)
    await query.answer()




def generate_product_details_text(product):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.

    :param product: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–¥—É–∫—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.
    :return: –°—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–¥—É–∫—Ç–∞.
    """
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    details = [
        f"<b>{product.name}</b>\n",
        f"–¶–µ–Ω–∞: <b>{product.price} —Ä—É–±.</b>\n",
        f"–¶–≤–µ—Ç: <b>{product.color}</b>\n",
        f"–†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: <b>{product.screen_size}</b>\n",
        f"–ü–∞–º—è—Ç—å: <b>{product.storage}</b>\n",
        f"–û–ó–£: <b>{product.ram}</b>\n",
        f"–ë–∞—Ç–∞—Ä–µ—è: <b>{product.battery_capacity} –º–ê—á</b>\n",
        f"–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: <b>{product.operating_system}</b>\n",
        f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã: <b>{product.camera_resolution}</b>\n"
    ]

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ
    if product.description:
        details.append(f"\n–û–ø–∏—Å–∞–Ω–∏–µ:\n{product.description}\n")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ
    stock_info = f"–í –Ω–∞–ª–∏—á–∏–∏: <b>{product.stock_quantity} —à—Ç.</b>" if product.stock_quantity > 0 else "<b>–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</b>"
    details.append(stock_info)

    return ''.join(details)



@router.callback_query(F.data.startswith("order_"))
async def show_order_details(query: CallbackQuery, bot: Bot):
    order_id = int(query.data.split("_")[1])
    order_details = await db.get_order_details(order_id)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è

    if not order_details:
        await query.message.answer("–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–∞–Ω–Ω—ã–º —á–µ—Ä–µ–∑ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏
    text = f"–ü–æ–∫—É–ø–∫–∞ ‚Ññ{order_details['purchase_id']}\n–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {order_details['purchase_date'].strftime('%d.%m.%Y')}\n\n–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n"
    total_amount = 0

    for product_detail in order_details['products']:
        text += f"{product_detail['name']} ({product_detail['quantity']} —à—Ç.) - {product_detail['price_at_purchase']} —Ä—É–±\n"
        total_amount += product_detail['price_at_purchase'] * product_detail['quantity']

    text += f"\n–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {order_details['total_amount']} —Ä—É–±"

    image_path = image_main

    await query_message_photo(query, bot, text, image_path, history_back)


@router.callback_query(F.data.startswith("purchases_page_"))
async def handle_pagination(query: CallbackQuery, bot: Bot):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback data
    page = int(query.data.split("_")[-1])

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id = query.from_user.id

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    new_keyboard = await generate_purchase_keyboard(user_id, page=page)

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –Ω—É–∂–Ω—É—é –ø–æ–∫—É–ø–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏:"
    image_path = image_main

    await query_message_photo(query, bot, text, image_path, new_keyboard)