import json

import aiohttp
import requests
from aiogram.fsm.state import StatesGroup, State

import logging

from core.callbacks.navigation import *
from core.database.models import OrderRequest, UserRole
from core.handlers.user_commands import *
from core.keyboards.reply import *
from core.projects.info.business_info.keyboards.builders import *
from datetime import datetime


router = Router()



async def get_currency_rates():
    url = 'https://www.cbr-xml-daily.ru/daily_json.js'
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json(content_type=None)
            return data['Valute']

def timeit():
    now = datetime.now()
    date_time = now.strftime("%d.%m.%Y %H:%M")
    return date_time


def extract_specific_rates(valute_data):
    usd_rate = valute_data['USD']['Value']
    eur_rate = valute_data['EUR']['Value']
    cny_rate = valute_data['CNY']['Value']
    jpy_rate = valute_data['JPY']['Value']
    return {
        'USD': usd_rate,
        'EUR': eur_rate,
        'CNY': cny_rate,
        'JPY': jpy_rate
    }
async def crypto_rates():
    url = 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,ripple,litecoin&vs_currencies=usd'
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json(content_type=None)
            return data



async def get_stock_price(ticker):
    url = f'http://iss.moex.com/iss/engines/stock/markets/shares/boards/tqbr/securities/{ticker}.json'
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json(content_type=None)
            last_price = data['marketdata']['data'][0][12]
            return last_price



@router.callback_query(F.data == 'business_info')
async def fin_trigger(query: CallbackQuery, bot: Bot):

    text = (
        f"<b>üíπ –ß–∞—Ç-–±–æ—Ç –∫–æ—Ç–∏—Ä–æ–≤–æ–∫</b> \n\n"
        f"–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π "
        f"–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ç–∏—Ä–æ–≤–∫–∞—Ö –∞–∫—Ü–∏–π, –æ–±–º–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—ã, –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –ø–æ–ª—É—á–∏—Ç—å "
        f"—Å–≤–µ–∂—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö, —á—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å "
        f"–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Ä—ã–Ω–∫–µ –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è."
    )
    image_path = 'https://botnest.ru/wp-content/uploads/2024/botnest/images/bot_money.webp'

    await query_message_photo(query, bot, text, image_path, rate_info)


@router.callback_query(F.data == 'get_rates')
async def get_rates(query: CallbackQuery, bot: Bot):
    time = timeit()

    rates = await get_currency_rates()
    specific_rates = extract_specific_rates(rates)
    response_text = f'<b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ {time}</b>:\n\n'
    response_text += f"–î–æ–ª–ª–∞—Ä –°–®–ê (USD): {specific_rates['USD']} —Ä—É–±.\n"
    response_text += f"–ï–≤—Ä–æ (EUR): {specific_rates['EUR']} —Ä—É–±.\n"
    response_text += f"–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å (CNY): {specific_rates['CNY']} —Ä—É–±.\n"
    response_text += f"–Ø–ø–æ–Ω—Å–∫–∏–µ –π–µ–Ω—ã (JPY): {specific_rates['JPY']} —Ä—É–±.\n"

    image_path = 'https://botnest.ru/wp-content/uploads/2024/botnest/images/bot_money.webp'

    await query_message_photo(query, bot, response_text, image_path, back)


@router.callback_query(F.data == 'get_crypto_rates')
async def get_crypto_rates(query: CallbackQuery, bot: Bot):
    time = timeit()

    rates = await crypto_rates()
    response_text = f'<b>–ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ {time}</b>:\n\n'
    response_text += f"–ë–∏—Ç–∫–æ–∏–Ω (BTC): ${rates['bitcoin']['usd']}\n"
    response_text += f"Ethereum (ETH): ${rates['ethereum']['usd']}\n"
    response_text += f"–†–∏–ø–ª (XRP): ${rates['ripple']['usd']}\n"
    response_text += f"Litecoin (LTC): ${rates['litecoin']['usd']}\n"

    image_path = 'https://botnest.ru/wp-content/uploads/2024/botnest/images/bot_money.webp'

    await query_message_photo(query, bot, response_text, image_path, back)


@router.callback_query(F.data == 'get_stock_prices')
async def get_stock_prices(query: CallbackQuery, bot: Bot):
    time = timeit()

    stocks = {
        "–ì–∞–∑–ø—Ä–æ–º": "GAZP",
        "–°–±–µ—Ä–±–∞–Ω–∫": "SBER",
        "–†–æ—Å—Ç–µ–ª–µ–∫–æ–º": "RTKM",
        "–†–æ—Å–Ω–µ—Ñ—Ç—å": "ROSN"
    }
    response_text = f'<b>–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –∞–∫—Ü–∏–π –Ω–∞ {time}</b>:\n\n'
    for name, ticker in stocks.items():
        price = await get_stock_price(ticker)
        response_text += f"{name}: {price} RUB\n"

    image_path = 'https://botnest.ru/wp-content/uploads/2024/botnest/images/bot_money.webp'

    await query_message_photo(query, bot, response_text, image_path, back)
