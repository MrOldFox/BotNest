import json

import aiofiles
from aiofile import AIOFile
import aiohttp
import asyncio
import os
import time
import logging

from aiogram.types import InputFile, FSInputFile
from aiogram import Bot, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove

from config_reader import config
from core.callbacks.navigation import query_message_photo, query_message
from core.database.requests import Database
from core.handlers.callback import update_last_message_id
from core.handlers.user_commands import start
from core.keyboards.builders import inline_builder
from core.projects.service.voice2text.keyboards.builders import text_voice, text_quit

router = Router()
db = Database()


class VOICE(StatesGroup):
    waiting_for_text = State()


@router.callback_query(F.data == 'text2voice')
async def text2voice(query: CallbackQuery, bot: Bot, state: FSMContext):
    if state:
        await state.clear()
    text = (
        f"<b>üîä –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∞—É–¥–∏–æ</b>\n\n"
        f"–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ—Ñ–∞–π–ª. "
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–ª—É—à–∞—Ç—å —Å—Ç–∞—Ç—å–∏, –Ω–æ–≤–æ—Å—Ç–∏, –∑–∞–º–µ—Ç–∫–∏ –∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ç–µ–∫—Å—Ç—ã, "
        f"–∫–æ–≥–¥–∞ —É –≤–∞—Å –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —á–∏—Ç–∞—Ç—å.\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É—Å–ª—ã—à–∞—Ç—å, –∏ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–ª—è –≤–∞—Å –∞—É–¥–∏–æ."
        f"\n\n–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–≥–æ <b>5 –∑–∞–ø—Ä–æ—Å–æ–≤</b>."
    )
    image_path = 'https://botnest.ru/wp-content/uploads/2024/botnest/images/v2t.webp'

    await query_message_photo(query, bot, text, image_path, text_voice)


@router.callback_query(F.data == 'voice')
async def enter_text(query: CallbackQuery, state: FSMContext, bot: Bot):
    await state.set_state(VOICE.waiting_for_text)

    text = (
        f"–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–æ–π –Ω–µ –±–æ–ª–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤, –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –≥–æ–ª–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞."
    )

    await query_message(query, bot, text, text_quit)

@router.message(VOICE.waiting_for_text, F.text)
async def process_t2v(message: Message, bot: Bot, state: FSMContext):
    has_tokens = await db.check_user_tokens(message.from_user.id, "voice_gen")
    if not has_tokens:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        sent_message = await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
                             reply_markup=inline_builder(text_quit))
        await update_last_message_id(bot, sent_message.message_id, message.from_user.id)
        return

    if len(message.text) > 30:
        await message.reply("–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª–∏–Ω—É.")
        await state.clear()
        return

    audio_file_path = await text_to_speech(message.text)
    if audio_file_path:

        voice_file = FSInputFile(audio_file_path)

        sent_message = await bot.send_voice(chat_id=message.chat.id, voice=voice_file, caption=message.text,
                                            reply_markup=inline_builder(text_quit))

        os.remove(audio_file_path)
    else:
        sent_message = await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ.", reply_markup=inline_builder(text_quit))

    await state.clear()

    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await update_last_message_id(bot, sent_message.message_id, message.from_user.id)


async def text_to_speech(text):
    url = "https://zvukogram.com/index.php?r=api/text"
    zvukogram_key = config.zvukogram_key.get_secret_value()
    zvukogram_email = config.zvukogram_email.get_secret_value()
    data = {
        'token': zvukogram_key,
        'email': zvukogram_email,
        'voice': '–ó–∞—Ö–∞—Ä new',
        'text': text,
        'format': 'mp3',
        'speed': 1.1,
        'pitch': 0.8,
        'emotion': 'good',
        'pause_sentence': 300,
        'pause_paragraph': 400,
        'bitrate': 48000,
    }

    headers = {
        'Accept': 'application/json',
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, data=data) as response:
            response_text = await response.text()
            try:
                result = json.loads(response_text)
                if result['status'] == 1:
                    file_url = result['file']
                    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ id –æ–∑–≤—É—á–∫–∏
                    file_path = f"{result['id']}.mp3"
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                    async with session.get(file_url) as file_response:
                        if file_response.status == 200:
                            async with aiofiles.open(file_path, 'wb') as f:
                                await f.write(await file_response.read())
                            return file_path
                        else:
                            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞")
                else:
                    print("–û—à–∏–±–∫–∞ API:", result.get('error'))
            except json.JSONDecodeError:
                print("Failed to decode JSON, server returned:", response_text)
                return None
